{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport qs from 'qs';\n\nfunction sendEmail(to) {\n  var _ref,\n      cc,\n      bcc,\n      subject,\n      body,\n      url,\n      toStr,\n      query,\n      supported,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function sendEmail$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, cc = _ref.cc, bcc = _ref.bcc, subject = _ref.subject, body = _ref.body;\n          url = 'mailto:';\n\n          if (to) {\n            toStr = Array.isArray(to) ? to.join(',') : to;\n            url += encodeURIComponent(toStr);\n\n            if (cc) {\n              cc = Array.isArray(cc) ? cc.join(',') : cc;\n            }\n\n            if (bcc) {\n              bcc = Array.isArray(bcc) ? bcc.join(',') : bcc;\n            }\n\n            query = qs.stringify({\n              cc: cc,\n              bcc: bcc,\n              subject: subject,\n              body: body\n            });\n\n            if (query.length) {\n              url += \"?\" + query;\n            }\n          }\n\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(Linking.canOpenURL(url));\n\n        case 5:\n          supported = _context.sent;\n\n          if (supported) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Promise.reject(new Error('Provided URL can not be handled')));\n\n        case 8:\n          return _context.abrupt(\"return\", Linking.openURL(url));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default sendEmail;","map":{"version":3,"sources":["/home/lorenzo/Desktop/pet-Reactnative-master/node_modules/react-native-email/index.js"],"names":["qs","sendEmail","to","cc","bcc","subject","body","url","toStr","Array","isArray","join","encodeURIComponent","query","stringify","length","Linking","canOpenURL","supported","Promise","reject","Error","openURL"],"mappings":";;AACA,OAAOA,EAAP,MAAe,IAAf;;AAEA,SAAeC,SAAf,CAA0BC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yEAA2D,EAA3D,EAAgCC,EAAhC,QAAgCA,EAAhC,EAAoCC,GAApC,QAAoCA,GAApC,EAAyCC,OAAzC,QAAyCA,OAAzC,EAAkDC,IAAlD,QAAkDA,IAAlD;AACMC,UAAAA,GADN,GACY,SADZ;;AAGE,cAAIL,EAAJ,EAAQ;AACAM,YAAAA,KADA,GACQC,KAAK,CAACC,OAAN,CAAcR,EAAd,IAAoBA,EAAE,CAACS,IAAH,CAAQ,GAAR,CAApB,GAAmCT,EAD3C;AAENK,YAAAA,GAAG,IAAIK,kBAAkB,CAACJ,KAAD,CAAzB;;AAEA,gBAAIL,EAAJ,EAAQ;AACNA,cAAAA,EAAE,GAAGM,KAAK,CAACC,OAAN,CAAcP,EAAd,IAAoBA,EAAE,CAACQ,IAAH,CAAQ,GAAR,CAApB,GAAmCR,EAAxC;AACD;;AAED,gBAAIC,GAAJ,EAAS;AACPA,cAAAA,GAAG,GAAGK,KAAK,CAACC,OAAN,CAAcN,GAAd,IAAqBA,GAAG,CAACO,IAAJ,CAAS,GAAT,CAArB,GAAqCP,GAA3C;AACD;;AAEKS,YAAAA,KAZA,GAYQb,EAAE,CAACc,SAAH,CAAa;AAAEX,cAAAA,EAAE,EAAFA,EAAF;AAAMC,cAAAA,GAAG,EAAHA,GAAN;AAAWC,cAAAA,OAAO,EAAPA,OAAX;AAAoBC,cAAAA,IAAI,EAAJA;AAApB,aAAb,CAZR;;AAcN,gBAAIO,KAAK,CAACE,MAAV,EAAkB;AAChBR,cAAAA,GAAG,UAAQM,KAAX;AACD;AACF;;AApBH;AAAA,2CAsB0BG,OAAO,CAACC,UAAR,CAAmBV,GAAnB,CAtB1B;;AAAA;AAsBQW,UAAAA,SAtBR;;AAAA,cAwBOA,SAxBP;AAAA;AAAA;AAAA;;AAAA,2CAyBWC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iCAAV,CAAf,CAzBX;;AAAA;AAAA,2CA4BSL,OAAO,CAACM,OAAR,CAAgBf,GAAhB,CA5BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BA,eAAeN,SAAf","sourcesContent":["import { Linking } from 'react-native'\nimport qs from 'qs'\n\nasync function sendEmail (to, { cc, bcc, subject, body } = {}) {\n  let url = 'mailto:'\n\n  if (to) {\n    const toStr = Array.isArray(to) ? to.join(',') : to\n    url += encodeURIComponent(toStr)\n\n    if (cc) {\n      cc = Array.isArray(cc) ? cc.join(',') : cc\n    }\n\n    if (bcc) {\n      bcc = Array.isArray(bcc) ? bcc.join(',') : bcc\n    }\n\n    const query = qs.stringify({ cc, bcc, subject, body })\n\n    if (query.length) {\n      url += `?${query}`\n    }\n  }\n\n  const supported = await Linking.canOpenURL(url)\n\n  if (!supported) {\n    return Promise.reject(new Error('Provided URL can not be handled'))\n  }\n\n  return Linking.openURL(url)\n}\n\nexport default sendEmail\n"]},"metadata":{},"sourceType":"module"}